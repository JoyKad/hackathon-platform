from rest_framework import serializers
from .models import Team
from accounts.models import User  # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


# üë§ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö)
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'full_name', 'user_code']


# üõ†Ô∏è –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
class TeamSerializer(serializers.ModelSerializer):
    members = UserSerializer(many=True, read_only=True)

    # üì• –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 5)
    members_code_input = serializers.ListField(
        child=serializers.CharField(max_length=8),
        write_only=True,
        required=True,
        min_length=2,
        max_length=5
    )

    class Meta:
        model = Team
        fields = ['id', 'name', 'banner', 'description', 'members', 'members_code_input']
        read_only_fields = ['members']

    def create(self, validated_data):
        request = self.context.get('request')
        captain = request.user if request else None

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∫–æ–¥ –∫–∞–ø–∏—Ç–∞–Ω–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–Ω —É–∫–∞–∑–∞–Ω)
        codes = validated_data.pop('members_code_input', [])
        codes = [code for code in codes if code != captain.user_code]

        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º
        team = Team.objects.create(captain=captain, **validated_data)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–¥–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
        users = list(User.objects.filter(user_code__in=codes))
        if captain:
            users.append(captain)

        team.members.set(users)
        return team


# üßæ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['email', 'full_name', 'password']

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            full_name=validated_data['full_name'],
            password=validated_data['password']
        )
        return user
